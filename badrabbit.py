from scapy.all import sniff, Raw
from scapy.layers.inet import IP
from scapy.layers.inet import TCP
from scapy.all import *

HoneypotIP = "10.0.0.6"

# Predefined suspicious packet sizes
predefined_sizes = [145, 238, 250]

# Threshold for blocking source MAC addresses
threshold = 3

suspiciousCount = 0

signatures = ["order+by", "union select", "union+select", "order by"]

FirstReg = re.compile(r"([\w\.-]+)\?([\w\.-]+)\=([\w\.-]+) \s*")
SecondReg = re.compile(r"([\w\.-]+)\?([\w\.-]+)\=([\w\.-]+) \s*(http+)")

interface = None

def checkForBadRabbit(packet):
    if packet.haslayer(TCP):
        tcp_layer = packet[TCP]
        ip_layer = packet[IP]

        #wannacry
        suspicious_ports = [139, 445, 443, 9001, 9050]
        if tcp_layer.dport in suspicious_ports or tcp_layer.sport in suspicious_ports:
            print(f"Suspicious activity detected: Port {tcp_layer.dport} is being used.")
            print(f"Packet details: {packet.summary()}")
            print(f"Source IP: {ip_layer.src} -> Destination IP: {ip_layer.dst}")
        
        # Check if the destination port is one of the ports used by HTTP or SMB
        #badrabbit
        if tcp_layer.dport in [80, 445, 139] or tcp_layer.sport in [80, 445, 139]:
            if packet.haslayer(Raw):
                payload = packet[Raw].load.decode(errors='ignore')
                
                # Search for the specific file name in the packet payload
                if "infpub.dat" in payload:
                    print("BadRabbit ransomware found.")
                    print(f"Source IP: {packet[IP].src} -> Destination IP: {packet[IP].dst}")
                    #print(f"Payload snippet: {payload[:100]}")  # Print first 100 characters of the payload

        if tcp_layer.dport in [445, 139] or tcp_layer.sport in [445, 139]:
            payload = str(packet[TCP].payload)
            if "NT LM 0.12" in payload:
                print("Packet contains 'NT LM 0.12'. Potential SMB protocol usage.")
                print(f"Source IP: {packet[IP].src} -> Destination IP: {packet[IP].dst}")
                #print(f"Payload: {payload[:100]}")  # Print first 100 characters of the payload
        
        if tcp_layer.dport in [445, 80] and ip_layer.dst == HoneypotIP:
            print("Potential BadRabbit activity detected!")
            print(f"Source IP: {ip_layer.src} -> Destination IP: {ip_layer.dst}")
            print(f"Destination Port: {tcp_layer.dport}")

        if packet[TCP].dport == 445:
            smb_packet = packet[TCP].payload

            # Extract the size of the SMB packet
            packet_size = len(smb_packet)
            if packet_size in predefined_sizes:
                mac_src = packet.src

                if  suspiciousCount >= threshold:
                    print(f"Suspicious activity detected from MAC address {mac_src}.")

        if packet[TCP].dport == 80:
            payload = str(packet[TCP].payload)
            for signature in signatures:
                if signature in payload:
                    print("Malware signature detected:", signature)

        if packet[TCP].dport == 80:
            if FirstReg.search(payload):
                if SecondReg.search(payload) is None:
                    print("Malicious pattern detected in packet payload.")

def start_sniffing():
    print("Starting packet sniffing for BadRabbit detection...")
    sniff(iface=interface,prn=checkForBadRabbit, count = 1500)

if __name__ == "__main__":
    start_sniffing()
