import re
from scapy.all import sniff, DNS, DNSQR, TCP, IP, Raw, packet
from collections import defaultdict
from datetime import datetime, timedelta
import base64
import threading


# Dictionary to store the count of DNS queries per IP per minute
dns_queries = defaultdict(int)
query_times = defaultdict(lambda: datetime.now())

# Parameters for detection
EXCESSIVE_LIMIT = 100  # Threshold for excessive DNS queries per minute
LONG_SUBDOMAIN_THRESHOLD = 70  # Length threshold for what constitutes a long subdomain

executable_header = re.compile(b'MZ')
script_shebang = re.compile(b'#!/bin/bash')

obfuscated_js_pattern = re.compile(rb"\W(eval|function|var)\W.*\W(window|document|eval|function|var)\W", re.I)
base64_pattern = re.compile(rb'(?:(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)')

def packet_callback(packet):
    if packet.haslayer(TCP) and packet.haslayer(Raw):
        payload = packet[Raw].load
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst

        # Check for JavaScript obfuscation
        if obfuscated_js_pattern.search(payload):
            print(f"Obfuscated JavaScript detected in traffic from {src_ip} to {dst_ip}")

        # Check for base64 encoded data
        if base64_pattern.fullmatch(payload.strip()):
            try:
                decoded_data = base64.b64decode(payload.strip())
                if decoded_data and re.match(rb'^[\x20-\x7E]*$', decoded_data) is None:
                    print(f"Base64 encoded payload detected in traffic from {src_ip} to {dst_ip}")
            except:
                pass  

def dns_callback(packet):
    if packet.haslayer(DNSQR):  # DNS query request
        src_ip = packet[IP].src
        query = packet[DNSQR].qname.decode('utf-8', errors='ignore')
        
        # Handle the time and count of queries
        current_time = datetime.now()
        if (current_time - query_times[src_ip]).seconds > 60:
            # Reset count after a minute
            dns_queries[src_ip] = 0
            query_times[src_ip] = current_time
        
        # Increment the query count
        dns_queries[src_ip] += 1
        
        # Check for excessive DNS queries
        if dns_queries[src_ip] > EXCESSIVE_LIMIT:
            print(f"Excessive DNS queries detected from {src_ip}: {dns_queries[src_ip]} queries in the last minute")
        
        # Check for long subdomain names
        if len(query) > LONG_SUBDOMAIN_THRESHOLD:
            print(f"Long subdomain detected in query from {src_ip}: {query}")

def start_sniffing():
    print("Starting DNS monitoring...")
    sniff(filter="udp port 53", prn=dns_callback, store=False)

def payload_analysis(packet):
    if IP in packet and TCP in packet and Raw in packet:
        payload = packet[Raw].load
        check_payload(payload)

def check_payload(payload):
    if executable_header.search(payload):
        print("Executable file detected.")
    if script_shebang.search(payload):
        print("Bash script detected.")

def jsObfuscationBase64encoded():
    print("Starting HTTP payload monitoring...")
    sniff(filter="tcp port 80", prn=packet_callback, store=False)

def run_in_thread(target_func):
    thread = threading.Thread(target=target_func)
    thread.start()

def run_all_functions():
    run_in_thread(payload_analysis)
    run_in_thread(jsObfuscationBase64encoded)
    run_in_thread(start_sniffing)