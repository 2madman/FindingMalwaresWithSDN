from scapy.layers.inet import IP
from scapy.layers.inet import TCP
from scapy.all import *
import common_patterns
import fiveToEight

interface = None
found = False
# Predefined suspicious packet sizes
predefined_sizes = [145, 238, 250]

# Threshold for blocking source MAC addresses
threshold = 3

suspiciousCount = 0

signatures = ["order+by", "union select", "union+select", "order by"]

FirstReg = re.compile(r"([\w\.-]+)\?([\w\.-]+)\=([\w\.-]+) \s*")
SecondReg = re.compile(r"([\w\.-]+)\?([\w\.-]+)\=([\w\.-]+) \s*(http+)")

def exPtr(packet):
    if TCP in packet and (packet[TCP].dport in [445, 139, 80]):
        if Raw in packet:
            payload = packet[Raw].load
            data = b"infpub.dat"
            if data in payload:
                print(f"Malware Detected in packet from {packet[IP].src} to {packet[IP].dst}")
                return True
    
    if TCP in packet and (packet[TCP].dport == 445 or packet[TCP].dport == 139):
        payload = bytes(packet[TCP].payload)

        # Search for the Bitcoin address string in the payload
        bitcoin_address = "1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX"
        if bitcoin_address in payload:
            print("ExPetr ransomware detected!")
            found = True
            
    if TCP in packet and packet[TCP].dport == 80:
        payload = bytes(packet[TCP].payload)

        propfind_string = b"PROPFIND ladmin$"
        if propfind_string in payload:
            print("ExPetr ransomware detected!")
            found = True
    

    if packet.haslayer(TCP):
        tcp_layer = packet[TCP]
        #badrabbit
        if tcp_layer.dport in [80, 445, 139] or tcp_layer.sport in [80, 445, 139]:
            if packet.haslayer(Raw):
                payload = packet[Raw].load.decode(errors='ignore')
                
                # Search for the specific file name in the packet payload
                if "infpub.dat" in payload:
                    print("BadRabbit ransomware found.")
                    print(f"Source IP: {packet[IP].src} -> Destination IP: {packet[IP].dst}")
                    found = True

        if tcp_layer.dport in [445, 139] or tcp_layer.sport in [445, 139]:
            payload = str(packet[TCP].payload)
            if "NT LM 0.12" in payload:
                print("Packet contains 'NT LM 0.12'. Potential SMB protocol usage.")
                print(f"Source IP: {packet[IP].src} -> Destination IP: {packet[IP].dst}")
                found = True

        if packet[TCP].dport == 445:
            smb_packet = packet[TCP].payload

            # Extract the size of the SMB packet
            packet_size = len(smb_packet)
            if packet_size in predefined_sizes:
                mac_src = packet.src

                if  suspiciousCount >= threshold:
                    print(f"Suspicious activity detected from MAC address {mac_src}.")

        if packet[TCP].dport == 80:
            payload = str(packet[TCP].payload)
            for signature in signatures:
                if signature in payload:
                    print("Malware signature detected:", signature)
                    found = True

        if packet[TCP].dport == 80:
            if FirstReg.search(payload):
                if SecondReg.search(payload) is None:
                    print("Malicious pattern detected in packet payload.")
                    found = True


def findMalware():
    sniff(iface=interface, prn=exPtr, count=500)
    return found


