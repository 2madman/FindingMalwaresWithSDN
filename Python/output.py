from scapy.layers.inet import IP
from scapy.layers.inet import TCP
from scapy.all import *

# Global variable to track if malware is detected
malware_detected = False

# Define the detection function
def detection(packet):
    global malware_detected
    if TCP in packet and (packet[TCP].dport in [445, 139, 80]):
        if Raw in packet:
            payload = packet[Raw].load
            data = b"infpub.dat"
            if data in payload:
                print(f"Malware Detected in packet from {packet[IP].src} to {packet[IP].dst} {payload}")
                malware_detected = True
                return True
    return False

# Define a callback function for sniffing that uses the detection function
def packet_callback(packet):
    if detection(packet):
        print(f"Malicious packet detected: {packet}")
        return True

# Main function to run the script
def detect():
    # List available interfaces
    interfaces = get_if_list()

    # Define the interface to sniff on
    interface = "\\Device\\NPF_Loopback"  # Update with your interface name

    # Verify if the interface is valid
    if interface not in interfaces:
        print(f"Error: Interface {interface} not found.")
        return

    try:
        sniff(iface=interface, prn=packet_callback, stop_filter=lambda x: malware_detected, count=10000)  # Adjust count based on your testing needs
        return malware_detected
    except OSError as e:
        print(f"OSError: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
